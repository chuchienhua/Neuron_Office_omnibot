const express = require("express");
const rosnodejs = require("rosnodejs");
const http = require("http");
const bodyParser = require('body-parser');
const WebSocket = require("ws");
const cors = require("cors");

const app = express();
const port = 9090;
const HEARTBEAT_INTERVAL = 20000; // heartbeat 20s
app.use(cors());
app.use(express.json());
app.use(bodyParser.json());
let relocation_initpose_bool, path_cancel_bool, go_home_bool, multiple_points_bool;

// 創建一個HTTP服務器並將Express應用掛載上去
const server = http.createServer(app);

// 創建WebSocket伺服器並將其掛載到同一個HTTP服務器上
const wss = new WebSocket.Server({ server });
const clientMap = new Map(); // 存储客户端ID与WebSocket连接的映射
const clientDataMap = new Map(); // 存储客户端ID与其状态的映射

wss.on("connection", function connection(ws) {
  console.log('Agv client connected via WebSocket.');
  let clientId = null;

  //setting heartbeat 30s / one time
  const heartbeat = setInterval(() => {
    if (ws.readyState === WebSocket.OPEN) {
      ws.send(JSON.stringify({ heartbeat: 0xAA }));
    }
  }, HEARTBEAT_INTERVAL);

  ws.on("message", function incoming(message) {
    try {
      const receivedData = JSON.parse(message);
      // 首次接收客户端ID
      if (receivedData.clientId && !clientId) {
        clientId = receivedData.clientId;
        clientMap.set(clientId, ws);
        console.log("Client connected with ID:", clientId);
      }
      if (clientId) {
        clientMap.set(clientId, ws);
        clientDataMap.set(clientId, {
          navigationStatus: receivedData.navigationStatus,
          joystickStatus: receivedData.joystickStatus,
          currentPose: receivedData.currentPose,
          map_match_ratio: receivedData.map_match_ratio
        });
        console.log(clientId + "Client data updated:", JSON.stringify(clientDataMap.get(clientId)));
      }
      else {
        console.log("Warning: Received message without clientId.");
      }
      // if (receivedData.heartbeat === 0XAB) {
      //   console.log("Heartbeat received from client");
      // }
    } catch (error) {
      console.log("Error parsing JSON:", error);
    }
  });
  ws.on("close", () => {
    clientMap.forEach((value, key) => {
      if (value === ws) {
        clientMap.delete(key);
        clientDataMap.delete(key);
        clearInterval(heartbeat);
      };
    });
  });
});

//------cors setting------//
app.use((req, res, next) => {
  res.header("Access-Control-Allow-Origin", "*");
  res.header(
    "Access-Control-Allow-Headers",
    "Origin, X-Requested-With, Content-Type, Accept"
  );
  next();
});

//-------------------------API-------------------------//
// API connect check / navigationStatus / joystickStatus
app.post("/connect", (req, res) => {
  const targetClientId = req.body.carid;
  const connect_bool = req.body.carconnect_bool;
  const clientData = clientDataMap.get(targetClientId);
  const targetClient = clientMap.get(targetClientId);
  console.log("Received connect value:", connect_bool);
  wss.clients.forEach((client) => {
    if (targetClient && targetClient.readyState === WebSocket.OPEN) {
      client.send(
        JSON.stringify({
          connect_bool: connect_bool,
        })
      );
    }
  });
  if (clientData ) {
    res.status(200).send({
      connect: "Success Connected to the server.", //connect msg
      navigationStatus: clientData.navigationStatus, //navigation status
      joystickStatus: clientData.joystickStatus, //joystick status
    });
  } else {
    res.status(404).send("No pose information available for client " + targetClientId);
    connect_bool = false;
  }
});

app.post("/disconnect", (req, res) => {
  const targetClientId = req.body.carid;
  const connect_bool = req.body.carconnect_bool;
  const targetClient = clientMap.get(targetClientId);
  wss.clients.forEach((client) => {
    if (targetClient && targetClient.readyState === WebSocket.OPEN) {
      client.send(
        JSON.stringify({
          connect_bool: connect_bool,
        })
      );
    }
  });
  if(req.body.carid && req.body.carconnect_bool){
    res.status(200).send({
      disconnect: "Success Disconnected to the server.", //disconnect msg
    });
  }
});

// API current_pose
app.post("/current_pose", (req, res) => {
  const targetClientId = req.body.carid;
  const clientData = clientDataMap.get(targetClientId);
  if (clientData) {
    res.status(200).send({
      currentPose: clientData.currentPose,
      map_match_ratio: clientData.map_match_ratio,
    });
  } else {
    res.status(404).send("No pose information available.");
  }
});

//API Relocation_initpose
app.post("/relocation_initpose", express.json(), (req, res) => {
  const value = req.body.relocation_initpose_value;
  const targetClientId = req.body.carid;
  const targetClient = clientMap.get(targetClientId);
  console.log("Received relocation_initpose value:", value);
  // check if a value was provided and if it is a number
  if (value !== undefined && !isNaN(value)) {
    relocation_initpose_bool = true;
    wss.clients.forEach((client) => {
      if (targetClient && targetClient.readyState === WebSocket.OPEN) {
        client.send(
          JSON.stringify({
            relocation_initpose_bool: relocation_initpose_bool,
            relocation_initpose_value: value,
          })
        );
      }
    });
    res.status(200).send("Relocation_initpose Message published successfully.");
  } else {
    relocation_initpose_bool = false;
    res.status(400).send("No valid number provided.");
  }
});

//API Path Cancel
app.post("/path_cancel", express.json(), (req, res) => {
  const path_cancel_value = req.body.path_cancel_value;
  const targetClientId = req.body.carid;
  const targetClient = clientMap.get(targetClientId);
  console.log("Received path_cancel value:", path_cancel_value);
  // check if a path_cancel_value was provided and if it is a number
  if (path_cancel_value !== undefined && !isNaN(path_cancel_value)) {
    path_cancel_bool = true;
    wss.clients.forEach((client) => {
      if (targetClient && targetClient.readyState === WebSocket.OPEN) {
        client.send(
          JSON.stringify({
            path_cancel_bool: path_cancel_bool,
            path_cancel_value: path_cancel_value,
          })
        );
      }
    });
    res.status(200).send("Path Cancel Message published successfully.");
  } else {
    path_cancel_bool = false;
    res.status(400).send("No valid number provided.");
  }
});

//API set_goal
app.post("/set_goal", express.json(), (req, res) => {
  const multiple_points = req.body.multiple_points;
  const targetClientId = req.body.carid;
  const targetClient = clientMap.get(targetClientId);
  console.log("Received set_goal value:", multiple_points);

  if (multiple_points) {
    multiple_points_bool = true;
    wss.clients.forEach((client) => {
      if (targetClient && targetClient.readyState === WebSocket.OPEN) {
        client.send(
          JSON.stringify({
            multiple_points: multiple_points,
            multiple_points_bool: multiple_points_bool,
          })
        );
      }
    });
    res.status(200).send("Goals published successfully.");
  } else {
    multiple_points_bool = false;
    res.status(400).send("Invalid parameters provided.");
  }
});

//API Go_home
app.post("/go_home", express.json(), (req, res) => {
  const go_home_value = req.body.go_home_value;
  const targetClientId = req.body.carid;
  const targetClient = clientMap.get(targetClientId);
  console.log("Received go_home value:", go_home_value);
  if (go_home_value !== undefined && !isNaN(go_home_value)) {
    go_home_bool = true;
    wss.clients.forEach((client) => {
      if (targetClient && targetClient.readyState === WebSocket.OPEN) {
        client.send(
          JSON.stringify({
            go_home_bool: go_home_bool,
            go_home_value: go_home_value,
          })
        );
      }
    });
    res.status(200).send("Go Home Msg Send successfully.");
  } else {
    go_home_bool = false;
    res.status(400).send("Invalid parameters provided.");
  }
});

// 使用HTTP服務器來監聽端口，而不是直接使用Express應用
server.listen(port, () => {
  console.log(`Server is running on port:${port}`);
});
